# J. R. Frye
# Tritium Transport: Poisson 2D FEM
# UMass Lowell Nuclear Chemical Engineering, Added Flow through pipe wall
# Student: James Frye
# Original Student: Anthony Bowers
# Personal Instructor (PI): Dr. Shubash Sharma
# 29Sep24

# Parameters [cm]
xmin = 0
xmax = 150 
ymin = 0
ymax = 7.5
wall_thickness = 2.0  # Thickness of the pipe wall in cm
fluid_radius = ${ymax - wall_thickness}  # 5.5 cm
diff_coeff = 0.000266493  # Diffusion of Tritium in Bulk Fluid
source_s = 0
mesh_type = QUAD9
n_felem_x = 1
n_felem_y = 250
degree = Second
flux_exit = 0   # Tritium is completely removed before leaving outflow
u_inlet = 3.6e-07   # Concentration of Tritium in the bulk fluid at inlet
velocity = '5.45 0 0' # Velocity of fluid taken from RE 10,000 
flux_center = 0
Mass_transfer_coeff = 0.002346
Ambient_conc = 0

[Problem]
  type = FEProblem
  coord_type = RZ
  rz_coord_axis = X  # Revolve around the x-axis (y is now radius)
  # Add new conditions  
[]
  
[Mesh]
  [2d]
    type = GeneratedMeshGenerator
    dim = 2
    coord_type = RZ
    rz_coord_axis = X  # Revolve around the x-axis (y is now radius)
    
    xmin = ${replace xmin}
    xmax = ${replace xmax}
    ymin = 0
    ymax = ${replace ymax}  # Total radius including wall
    
    nx = ${replace n_felem_x}
    ny = ${replace n_felem_y}
    elem_type = ${replace mesh_type}
  []
[]
    
[Regions]
  [./fluid]
    type = InnerRadius
    inner_radius = 0.0
    outer_radius = ${replace fluid_radius}
  [../]
  
  [./wall]
    type = AnnularRegion
    inner_radius = ${replace fluid_radius}
    outer_radius = ${replace ymax}
  [../]
[]
    
[Materials]
  [./fluid_material]
    type = Constant
    value = 1.0  # Example property (e.g., diffusion coefficient)
    regions = 'fluid'
  [../]
  
  [./wall_material]
    type = Constant
    value = 0.5  # Example property for the wall
    regions = 'wall'
  [../]
[]
    
[Variables]
  [u]
    order = ${replace degree}
    family = lagrange
  []
[]
    
[AuxVariables]
  [diffFluxU_axial]
    order = FIRST
    family = MONOMIAL
  []
  
  [diffFluxU_radius]
    order = FIRST
    family = MONOMIAL
  []
[]
    
[Kernels]
  [diffusion-term]
    type = DiffusionTerm
    variable = u     # Produced quantity
    diffCoeff = ${replace diff_coeff}
  []
  
  [source-term]
    type = SourceTerm
    variable = u     # Add to produced quantity
    sourceS = ${replace source_s}
  []
  
  [convection-term]
    type = ConvectionTerm
    variable = u     # Produced quantity 
    velocity = ${replace velocity}
  []
[]
    
[AuxKernels]
  [diffusion-flux-x]
    execute_on = timestep_end
    type = DiffusionFluxComponent       # User-built auxiliary kernel
    field = u                           # User-defined parameter
    diffCoeff = ${replace diff_coeff}   # User-defined parameter
    component = X                       # User-defined parameter
    variable = diffFluxU_axial         # Produced quantity
  []
  
  [diffusion-flux-y]
    execute_on = timestep_end
    type = DiffusionFluxComponent       # User-built auxiliary kernel
    field = u                           # User-defined parameter
    diffCoeff = ${replace diff_coeff}   # User-defined parameter
    component = Y                       # User-defined parameter
    variable = diffFluxU_radius        # Produced quantity
  []
[]
    
[BCs]
  [metal]                            # Liquid-metal interface
    type = NormalFluxBC           # Diffusion of Tritium into SS316 is limited by the mass transfer through pipe
    variable = u
    boundary = top    
    transferCoeff = ${replace Mass_transfer_coeff}			# Estimated mass transfer coeff [cm/s]
    reference = ${replace Ambient_conc}  # Inside pipe no tritium (boundary acts as a sink)
    # Change it so the boundary is not a sink
  []
  
  [center]                           # Center line of bulk fuel salt
    type = NeumannBC				    # DirichletBC was imposed by the assumption that tritium is removed in the secondary fluid
    variable = u                      # Our unknown variable from the [Variables] block
    boundary = bottom
    value = ${replace flux_center}				
  []
  
  [outflow]
    type = NeumannBC
    variable = u
    boundary = right
    value = ${replace flux_exit}
  []
  
  [inflow]
    type = DirichletBC
    variable = u
    boundary = left
    value = ${replace u_inlet}
  []
[]
    
[Executioner]
  type = Steady
  solve_type = 'PJFNK'
  petsc_options_iname = '-pc_type -pc_hypre_type'
  petsc_options_value = 'hypre boomeramg'
[]
    
[VectorPostprocessors]
  [axial-line]
    type = LineValueSampler
    execute_on = 'timestep_end final'
    variable = 'u diffFluxU_axial '    # Output data
    start_point = '${replace xmin} ${replace ymax} 0'
    end_point = '${replace xmax} ${replace ymax} 0'
    num_points = 20
    sort_by = id
  []
  
  [radial-line]
    type = LineValueSampler
    execute_on = 'timestep_end final'
    variable = 'u diffFluxU_radius'    # Output data
    start_point = '${replace xmax} ${replace ymin} 0'
    end_point = '${replace xmax} ${replace ymax} 0'
    num_points = 51
    sort_by = id
  []
   
[]
    
[Outputs]
  console = true
  [tecplot]
    type = Tecplot
    tecplot = true
  []
  
  [vtk]
    type = VTK
    execute_on = 'final'
    file_base = out-actual
  []
  
  [axial-line]
    type = CSV
    execute_on = 'final'
    show = 'axial-line'
    file_base = out-axial-actual
  []
  
  [radial-line]
    type = CSV
    execute_on = 'final'
    show = 'radial-line'
    file_base = out-radial-actual
  []
[]
